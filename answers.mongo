db.books.insertMany([
  {
    title: 'To Kill a Mockingbird',
    author: 'Harper Lee',
    genre: 'Fiction',
    published_year: 1960,
    price: 12.99,
    in_stock: true,
    pages: 336,
    publisher: 'J. B. Lippincott & Co.'
  },
  {
    title: '1984',
    author: 'George Orwell',
    genre: 'Dystopian',
    published_year: 1949,
    price: 10.99,
    in_stock: true,
    pages: 328,
    publisher: 'Secker & Warburg'
  },
  {
    title: 'The Great Gatsby',
    author: 'F. Scott Fitzgerald',
    genre: 'Fiction',
    published_year: 1925,
    price: 9.99,
    in_stock: true,
    pages: 180,
    publisher: 'Charles Scribner\'s Sons'
  },
  {
    title: 'Brave New World',
    author: 'Aldous Huxley',
    genre: 'Dystopian',
    published_year: 1932,
    price: 11.50,
    in_stock: false,
    pages: 311,
    publisher: 'Chatto & Windus'
  },
  {
    title: 'The Hobbit',
    author: 'J.R.R. Tolkien',
    genre: 'Fantasy',
    published_year: 1937,
    price: 14.99,
    in_stock: true,
    pages: 310,
    publisher: 'George Allen & Unwin'
  },
  {
    title: 'The Catcher in the Rye',
    author: 'J.D. Salinger',
    genre: 'Fiction',
    published_year: 1951,
    price: 8.99,
    in_stock: true,
    pages: 224,
    publisher: 'Little, Brown and Company'
  },
  {
    title: 'Pride and Prejudice',
    author: 'Jane Austen',
    genre: 'Romance',
    published_year: 1813,
    price: 7.99,
    in_stock: true,
    pages: 432,
    publisher: 'T. Egerton, Whitehall'
  },
  {
    title: 'The Lord of the Rings',
    author: 'J.R.R. Tolkien',
    genre: 'Fantasy',
    published_year: 1954,
    price: 19.99,
    in_stock: true,
    pages: 1178,
    publisher: 'Allen & Unwin'
  },
  {
    title: 'Animal Farm',
    author: 'George Orwell',
    genre: 'Political Satire',
    published_year: 1945,
    price: 8.50,
    in_stock: false,
    pages: 112,
    publisher: 'Secker & Warburg'
  },
  {
    title: 'The Alchemist',
    author: 'Paulo Coelho',
    genre: 'Fiction',
    published_year: 1988,
    price: 10.99,
    in_stock: true,
    pages: 197,
    publisher: 'HarperOne'
  },
  {
    title: 'Moby Dick',
    author: 'Herman Melville',
    genre: 'Adventure',
    published_year: 1851,
    price: 12.50,
    in_stock: false,
    pages: 635,
    publisher: 'Harper & Brothers'
  },
  {
    title: 'Wuthering Heights',
    author: 'Emily Brontë',
    genre: 'Gothic Fiction',
    published_year: 1847,
    price: 9.99,
    in_stock: true,
    pages: 342,
    publisher: 'Thomas Cautley Newby'
  }
])


// find all books of a specific genre
db.books.find({ genre: "Fantasy" });

// find books published in a specific year
db.books.find({ published_year: { $gt: 1950 } });

//find books by a specific auther
db.books.find({ author: "J.R.R. Tolkien" });

// update the price of specific book
db.books.updateOne(
    { title: "The Great Gatsby" },
    { $set: { price: 13.99 } }
);

//delete a book by its title
db.books.deleteOne({ title: "1984" });

//find books that are both in stock and published in a particular year
db.books.find({
    in_stock: true,
    published_year: { $gt: 2010 }
});

//use projection to diplay nly the title, author, and price fields in your queries
db.books.find(
    {}, // Empty query document to match all books
    { title: 1, author: 1, price: 1, _id: 0 } // Projection to include title, author, price and exclude _id
);

//Implement sorting to display books by price (both ascending and descending)
db.books.find().sort({ price: 1 });
db.books.find().sort({ price: -1 });

//Use the limit and skip methods to implement pagination (5 books per page)
/ Example: Get the first 5 books (Page 1)
db.books.find().limit(5);

// Example: Get the next 5 books (Page 2 - skips the first 5, then takes the next 5)
db.books.find().skip(5).limit(5);

// Example: Get the 5 books for Page 3 (skips the first 10, then takes the next 5)
db.books.find().skip(10).limit(5);

//create an agregation pipeline to calculate the average price of books per genre
db.books.aggregate([
    {
        $group: {
            _id: "$genre", // Group by the 'genre' field
            averagePrice: { $avg: "$price" } // Calculate the average price for each group
        }
    },
    {
        $sort: { averagePrice: -1 } // Optional: Sort the results by average price (descending)
    }
]);

//Create an aggregation pipeline to find the author with the most books in the collection
db.books.aggregate([
    {
        $group: {
            _id: "$author", // Group by the 'author' field
            bookCount: { $sum: 1 } // Count the number of books for each author
        }
    },
    {
        $sort: { bookCount: -1 } // Sort authors by their book count in descending order
    },
    {
        $limit: 1 // Get only the top author (the one with the most books)
    }
]);

//Implement a pipeline that groups books by publication decade and counts them
db.books.aggregate([
    {
        $project: {
            // Calculate the decade: e.g., 1925 -> 1920, 1960 -> 1960
            decade: {
                $multiply: [
                    { $floor: { $divide: ["$published_year", 10] } },
                    10
                ]
            },
            // Include other fields if needed, e.g., title: 1, author: 1
        }
    },
    {
        $group: {
            _id: "$decade", // Group by the calculated 'decade'
            count: { $sum: 1 } // Count the number of books in each decade
        }
    },
    {
        $sort: { _id: 1 } // Optional: Sort the results by decade in ascending order
    }
]);

//Create an index on the title field for faster searches
db.books.createIndex({ title: 1 })

//Create a compound index on author and published_year
db.books.createIndex({ author: 1, published_year: 1 });

//Use the explain() method to demonstrate the performance improvement with your indexes
db.books.find({ author: "J.R.R. Tolkien", published_year: 1954 }).explain("executionStats");




